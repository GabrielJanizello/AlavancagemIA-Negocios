import os
import google.generativeai as genai
import streamlit as st

# Obt√©m a chave da API a partir da vari√°vel de ambiente
api_key = os.environ.get("GOOGLE_API_KEY")

# Verifica se a chave est√° definida
if not api_key:
    raise EnvironmentError("A vari√°vel de ambiente GOOGLE_API_KEY n√£o est√° definida!")

# Configura a API do Gemini com a chave obtida
genai.configure(api_key=api_key)

# A partir daqui, voc√™ pode fazer chamadas √† API normalmente
# Configura o cliente da SDK do Gemini
MODEL_ID = "gemini-2.0-flash"

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from google.adk.tools import google_search
import textwrap  # Para formatar melhor a sa√≠da de texto
import requests  # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
import uuid


def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()

    # Gera IDs √∫nicos para usu√°rio e sess√£o
    user_id = str(uuid.uuid4())
    session_id = str(uuid.uuid4())

    # Cria a sess√£o
    session = session_service.create_session(
        app_name=agent.name,
        user_id=user_id,
        session_id=session_id
    )

    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id=user_id, session_id=session_id, new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text + "\n"
    return final_response


##########################################
# --- Agente 1: Cota√ß√£o dos Produtos --- #
##########################################
def agente_cotador(produto):
    cotador = Agent(
        name="agente_cotador",
        model="gemini-2.0-flash",
        description="Agente que faz uma cota√ß√£o dos valores dos produtos com base na pesquisa da internet com o Google Search.",
        tools=[google_search],
        instruction="""Voc√™ ir√° realizar uma busca para fazer uma cota√ß√£o atual dos valores dos produtos/ingredientes usados.
        Utilize fontes confi√°veis e atualizadas, como sites de supermercados, distribuidores ou portais especializados.
        Priorize pre√ßos m√©dios de mercado, considerando varia√ß√µes regionais quando relevante.
        Registre o nome do produto, o pre√ßo, a unidade de medida e a fonte da informa√ß√£o."""
    )

    entrada_do_agente_cotador = f"Produto: {produto}"

    lancamentos = call_agent(cotador, entrada_do_agente_cotador)
    return lancamentos


##########################################
# --- Agente 2: Precifica√ß√£o dos Produtos --- #
##########################################
def agente_precificador(produto, lancamentos_cotador):
    precificador = Agent(
        name="agente_precificador",
        model="gemini-2.0-flash",
        description="Agente que faz uma precifica√ß√£o correta dos produtos.",
        instruction="""Voc√™ √© um assistente especializado em precifica√ß√£o de produtos para pequenos e m√©dios neg√≥cios.
        Com base nos dados de custo fornecidos pelo agente cotador, elabore uma precifica√ß√£o correta considerando margem de lucro, custos fixos e vari√°veis, e pr√°ticas de mercado.
        Forne√ßa sugest√µes de pre√ßo final, margem aplicada e justificativas claras."""
    )

    entrada_do_agente_precificador = f"Produto: {produto}\nLan√ßamentos cotados: {lancamentos_cotador}"

    precificador_dos_produtos = call_agent(precificador, entrada_do_agente_precificador)
    return precificador_dos_produtos


################################################
# --- Agente 3: Gestor de Informa√ß√µes --- #
################################################
def agente_informacoes(produto, lancamentos_precificador):
    informacoes = Agent(
        name="agente_informacoes",
        model="gemini-2.0-flash",
        description="Agente que analisa o produto precificado e fornece insights estrat√©gicos, tend√™ncias de mercado e informa√ß√µes contextuais relevantes",
        instruction="""Voc√™ √© um gestor de informa√ß√µes estrat√©gicas para neg√≥cios. Com base no produto e nos dados de precifica√ß√£o fornecidos, sua tarefa √©:
        1. Identificar 2-3 tend√™ncias de mercado atuais relevantes para este produto.
        2. Apontar 1-2 oportunidades e 1-2 riscos potenciais associados √† comercializa√ß√£o deste produto com a precifica√ß√£o sugerida.
        3. Fornecer uma breve an√°lise da concorr√™ncia, se informa√ß√µes estiverem dispon√≠veis publicamente (sem realizar novas buscas, apenas com base no conhecimento geral e nos dados j√° fornecidos).
        4. Sugerir um p√∫blico-alvo ideal para o produto com base nas informa√ß√µes.
        Seja conciso e forne√ßa informa√ß√µes acion√°veis.""",
    )

    entrada_do_agente_informacoes = f"Produto:{produto}\nLan√ßamentos precificados: {lancamentos_precificador}"
    gestor_de_informacoes = call_agent(informacoes, entrada_do_agente_informacoes)
    return gestor_de_informacoes


##########################################
# --- Agente 4: Apresentador do Relat√≥rio/Documenta√ß√£o --- #
##########################################
def agente_apresentador(produto, gestor_de_informacoes):
    apresentador = Agent(
        name="agente_apresentador",
        model="gemini-2.0-flash",
        description="Agente criador e apresentador dos dados gerados.",
        instruction="""O agente apresentador √© respons√°vel por revisar, sintetizar e apresentar os dados e an√°lises produzidos pelos demais agentes,
        transformando-os em relat√≥rios claros, objetivos e acion√°veis para o empres√°rio. Voc√™ deve Analisar todas as respostas e informa√ß√µes geradas pelos outros agentes.
        Corrigir erros de linguagem, inconsist√™ncias nos dados ou interpreta√ß√µes equivocadas.
        Garantir que todas as informa√ß√µes estejam atualizadas, bem fundamentadas e organizadas.
        Eliminar redund√¢ncias, simplificar termos e destacar o que √© realmente relevante.
        Resumir os principais pontos em t√≥picos claros, utilizando recursos como listas, quadros comparativos, e gr√°ficos quando necess√°rio."""
    )
    entrada_do_agente_apresentador = f"Produto: {produto}\nRascunho: {gestor_de_informacoes}"
    informacao_completa = call_agent(apresentador, entrada_do_agente_apresentador)
    return informacao_completa


# --- Streamlit UI ---
st.title("üöÄ Sistema AlavancagemIA de Neg√≥cios! üöÄ")

st.markdown("**Informe as suas receitas que deseja precificar, produtos e ticket m√©dio e deixe que faremos o resto!**\n\n"
            "**Trabalhamos melhor com voc√™!** \n\n Quanto mais precisas forem suas informa√ß√µes, melhores ser√£o as solu√ß√µes que podemos criar juntos.")

# Entrada de produto
produto = st.text_input("‚ùì Por favor, digite o nome dos produtos/receitas para an√°lise: ")

# Verifica se o produto foi fornecido
if produto:
    st.write(f"üîç Analisando o produto: **{produto}**")

    # Chama os agentes
    lancamentos_cotador = agente_cotador(produto)
    st.subheader('üî¢ Resultados do Agente 1 - Cota√ß√£o dos Valores.')
    st.write(lancamentos_cotador)

    lancamentos_precificador = agente_precificador(produto, lancamentos_cotador)
    st.subheader('üî¢ Resultados do Agente 2 - Precifica√ß√£o')
    st.write(lancamentos_precificador)

    gestor_info = agente_informacoes(produto, lancamentos_precificador)
    st.subheader('üìä Resultados do Agente 3 - Informa√ß√µes Estrat√©gicas')
    st.write(gestor_info)

    relatorio_final = agente_apresentador(produto, gestor_info)
    st.subheader('üìã Relat√≥rio Final do Agente 4')
    st.write(relatorio_final)

    st.success("‚úÖ Sistema finalizado com sucesso!")
else:
    st.warning("‚ö†Ô∏è Voc√™ precisa fornecer um nome de produto para an√°lise!")
